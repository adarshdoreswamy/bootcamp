Please enter a MongoDB connection string (Default: mongodb://localhost/):

Current Mongosh Log ID: 64c0f7f43f97f58dfab283ed
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.10.1
Using MongoDB:          6.0.8
Using Mongosh:          1.10.1

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2023-07-26T09:28:27.087+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> show dbs
admin            40.00 KiB
bootcamp         56.00 KiB
config          108.00 KiB
local            40.00 KiB
mango_practice    8.00 KiB
test> use mango_practice
switched to db mango_practice
mango_practice> db.movies.insert({title:"Fight Club", writer: "Chuck Palahniuk", year: "1999", actors:["Brad Pitt", "Edward Norton"]})
DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c0f96d3f97f58dfab283ee") }
}
mango_practice>  db.movies.insert({title:"Pulp Fiction", writer:"Quentin Tarantino", year:"2009", actors:["John Travolta", "Uma Thurman"]})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c0f9ac3f97f58dfab283ef") }
}
mango_practice> db.movies.insert({title:"Inglorious Basterds", writer:"Quentin Tarantino", year:"2009", actors:["Brad Pitt", "Diane Kruger", "Eli Roth"]})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c0f9b43f97f58dfab283f0") }
}
mango_practice> db.movies.insert({title:"The Hobbit: An unexpected Journey", writer:"J.R.R. Tolkein", year:"2012",franchise:"The Hobbit"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c0f9bd3f97f58dfab283f1") }
}
mango_practice> db.movies.insert({title:"The Hobbit: The Desolation of Smaug", writer:"J.R.R Tolkien", year:"2013", franchise:"The Hobbit"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c0f9ca3f97f58dfab283f2") }
}
mango_practice> db.movies.insert({title:"The Hobbit: The Battle of the Five Armies", writer:"J.R.R Tolkien", year:"2002", franchise:"The Hobbit", synopsis:"Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c0f9d63f97f58dfab283f3") }
}
mango_practice> db.movies.insert({title:"Avatar"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c0f9e33f97f58dfab283f4") }
}
mango_practice> db.movies.find()
[
  {
    _id: ObjectId("64c0f96d3f97f58dfab283ee"),
    title: 'Fight Club',
    writer: 'Chuck Palahniuk',
    year: '1999',
    actors: [ 'Brad Pitt', 'Edward Norton' ]
  },
  {
    _id: ObjectId("64c0f9ac3f97f58dfab283ef"),
    title: 'Pulp Fiction',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'John Travolta', 'Uma Thurman' ]
  },
  {
    _id: ObjectId("64c0f9b43f97f58dfab283f0"),
    title: 'Inglorious Basterds',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ]
  },
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit'
  },
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit'
  },
  {
    _id: ObjectId("64c0f9d63f97f58dfab283f3"),
    title: 'The Hobbit: The Battle of the Five Armies',
    writer: 'J.R.R Tolkien',
    year: '2002',
    franchise: 'The Hobbit',
    synopsis: 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.'
  },
  { _id: ObjectId("64c0f9e33f97f58dfab283f4"), title: 'Avatar' }
]
mango_practice> db.movies.find()
[
  {
    _id: ObjectId("64c0f96d3f97f58dfab283ee"),
    title: 'Fight Club',
    writer: 'Chuck Palahniuk',
    year: '1999',
    actors: [ 'Brad Pitt', 'Edward Norton' ]
  },
  {
    _id: ObjectId("64c0f9ac3f97f58dfab283ef"),
    title: 'Pulp Fiction',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'John Travolta', 'Uma Thurman' ]
  },
  {
    _id: ObjectId("64c0f9b43f97f58dfab283f0"),
    title: 'Inglorious Basterds',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ]
  },
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit'
  },
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit'
  },
  {
    _id: ObjectId("64c0f9d63f97f58dfab283f3"),
    title: 'The Hobbit: The Battle of the Five Armies',
    writer: 'J.R.R Tolkien',
    year: '2002',
    franchise: 'The Hobbit',
    synopsis: 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.'
  },
  { _id: ObjectId("64c0f9e33f97f58dfab283f4"), title: 'Avatar' }
]
mango_practice> db.movies.find({writer:"Quentin Tarantino"})
[
  {
    _id: ObjectId("64c0f9ac3f97f58dfab283ef"),
    title: 'Pulp Fiction',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'John Travolta', 'Uma Thurman' ]
  },
  {
    _id: ObjectId("64c0f9b43f97f58dfab283f0"),
    title: 'Inglorious Basterds',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ]
  }
]
mango_practice> db.movies.find({actor:"brad pitt"})

mango_practice> db.movies.find({actor:"brad pitt"})

mango_practice> db.movies.find({actors:"brad pitt"})

mango_practice> db.movies.find({actors:"Brad Pitt"})
[
  {
    _id: ObjectId("64c0f96d3f97f58dfab283ee"),
    title: 'Fight Club',
    writer: 'Chuck Palahniuk',
    year: '1999',
    actors: [ 'Brad Pitt', 'Edward Norton' ]
  },
  {
    _id: ObjectId("64c0f9b43f97f58dfab283f0"),
    title: 'Inglorious Basterds',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ]
  }
]
mango_practice> db.movies.find({franchise:"The Hobbit"})
[
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit'
  },
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit'
  },
  {
    _id: ObjectId("64c0f9d63f97f58dfab283f3"),
    title: 'The Hobbit: The Battle of the Five Armies',
    writer: 'J.R.R Tolkien',
    year: '2002',
    franchise: 'The Hobbit',
    synopsis: 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.'
  }
]
mango_practice> db.movies.find({year:{$gt:1990},{$lt:2000}})
Uncaught:
SyntaxError: Unexpected token (1:32)

> 1 | db.movies.find({year:{$gt:1990},{$lt:2000}})
    |                                 ^
  2 |

mango_practice> db.movies.find({year:{$gt:1990, $lt:2000}})

mango_practice> db.movies.find({year:{$gt:"1990", $lt:"2000"}})
[
  {
    _id: ObjectId("64c0f96d3f97f58dfab283ee"),
    title: 'Fight Club',
    writer: 'Chuck Palahniuk',
    year: '1999',
    actors: [ 'Brad Pitt', 'Edward Norton' ]
  }
]
mango_practice> db.movies.find({year:{$gt:"2010", $lt:"2000"}})

mango_practice> db.movies.find({year:{ $lt:"2000",$gt:"2010"}})

mango_practice> db.movies.find({$or:{year:{ $lt:"2000"},{$gt:"2010"}}})
Uncaught:
SyntaxError: Unexpected token (1:40)

> 1 | db.movies.find({$or:{year:{ $lt:"2000"},{$gt:"2010"}}})
    |                                         ^
  2 |

mango_practice> db.movies.find({$or:[{year:{ $lt:"2000"}},{year:{$gt:"2010"}}])
Uncaught:
SyntaxError: Unexpected token, expected "," (1:62)

> 1 | db.movies.find({$or:[{year:{ $lt:"2000"}},{year:{$gt:"2010"}}])
    |                                                               ^
  2 |

mango_practice> db.movies.find({$or:[{year:{ $lt:"2000"}},{year:{$gt:"2010"}}]})
[
  {
    _id: ObjectId("64c0f96d3f97f58dfab283ee"),
    title: 'Fight Club',
    writer: 'Chuck Palahniuk',
    year: '1999',
    actors: [ 'Brad Pitt', 'Edward Norton' ]
  },
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit'
  },
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit'
  }
]
mango_practice> db.movies.updateOne({title:"The Hobbit: An unexpected Journey"},{$set:{ synonpsis:"adarsh"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
mango_practice> db.movies.find({_id: ObjectId("64c0f9bd3f97f58dfab283f1")})
[
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit',
    synonpsis: 'adarsh'
  }
]
mango_practice> db.movies.updateOne({title:"The Hobbit: An unexpected Journey"},{$set:{ synonpsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
mango_practice> db.movies.find({_id: ObjectId("64c0f9bd3f97f58dfab283f1")})
[
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit',
    synonpsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'
  }
]
mango_practice> db.movies.updateOne({title:"The Hobbit: The Desolation of Smaug"},{$set:{ synonpsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
mango_practice> db.movies.find({_id: ObjectId("64c0f9ca3f97f58dfab283f2")})
[
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit',
    synonpsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.'
  }
]
mango_practice> db.movies.updateOne({_id: ObjectId("64c0f9ac3f97f58dfab283ef")},{actors:{$push:"Samuel L. Jackson"}})
MongoInvalidArgumentError: Update document requires atomic operators
mango_practice> db.movies.updateOne({_id: ObjectId("64c0f9ac3f97f58dfab283ef")},{$push:{$actors:"Samuel L. Jackson"}})
MongoServerError: The dollar ($) prefixed field '$actors' in '$actors' is not allowed in the context of an update's replacement document. Consider using an aggregation pipeline with $replaceWith.
mango_practice> db.movies.updateOne({_id: ObjectId("64c0f9ac3f97f58dfab283ef")},{$push:{actors:"Samuel L. Jackson"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
mango_practice> db.movies.find({_id: ObjectId("64c0f9ac3f97f58dfab283ef")})
[
  {
    _id: ObjectId("64c0f9ac3f97f58dfab283ef"),
    title: 'Pulp Fiction',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'John Travolta', 'Uma Thurman', 'Samuel L. Jackson' ]
  }
]
mango_practice> db.movies.find({synopsis:{$regex:"biblo"}})

mango_practice> db.movies.find({synonpsis:{$regex:"biblo"}})

mango_practice> db.movies.find({synonpsis:{$regex:"biblo"}})

mango_practice> db.movies.find({synonpsis:{$regex:"Biblo"}})

mango_practice> db.movies.find({synonpsis:{$regex:"Bilbo"}})
[
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit',
    synonpsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'
  },
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit',
    synonpsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.'
  }
]
mango_practice> db.movies.find({synonpsis:{$regex:"to"}})
[
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit',
    synonpsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'
  },
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit',
    synonpsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.'
  }
]
mango_practice> db.movies.find({synonpsis:{$regex:"Gandalf"}})
[
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit',
    synonpsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.'
  }
]
mango_practice> db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]})
[
  {
    _id: ObjectId("64c0f9d63f97f58dfab283f3"),
    title: 'The Hobbit: The Battle of the Five Armies',
    writer: 'J.R.R Tolkien',
    year: '2002',
    franchise: 'The Hobbit',
    synopsis: 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.'
  }
]
mango_practice> db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]})

mango_practice> db.movies.find({$or:[{synonpsis:{$regex:"dwarves"}}, {synonpsis:{$regex:"hobbit"}}]})
[
  {
    _id: ObjectId("64c0f9bd3f97f58dfab283f1"),
    title: 'The Hobbit: An unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit',
    synonpsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'
  },
  {
    _id: ObjectId("64c0f9ca3f97f58dfab283f2"),
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R Tolkien',
    year: '2013',
    franchise: 'The Hobbit',
    synonpsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.'
  }
]
mango_practice> db.movies.remove({_id:ObjectId("5c9f992ae5c2dfe9b3729c00")})
DeprecationWarning: Collection.remove() is deprecated. Use deleteOne, deleteMany, findOneAndDelete, or bulkWrite.
{ acknowledged: true, deletedCount: 0 }
mango_practice> db.movies.remove({_id:ObjectId("5c9f9936e5c2dfe9b3729c01")})
{ acknowledged: true, deletedCount: 0 }
mango_practice> db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})
{ acknowledged: true, insertedIds: { '0': 1 } }
mango_practice> db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})
{ acknowledged: true, insertedIds: { '0': 2 } }
mango_practice> db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c1136e3f97f58dfab283f5") }
}
mango_practice> db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c113743f97f58dfab283f6") }
}
mango_practice> db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c113793f97f58dfab283f7") }
}
mango_practice> db.docs.find({city:{$exists:true}}, {_id:0, city:1, pop:1},{ pop:{$gt:10000}})

mango_practice> db.docs.find({city:{$exists:true}}, {_id:0, city:1, pop:1},{ pop:{$gt:10000}})

mango_practice> db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c113f43f97f58dfab283f8") }
}
mango_practice> db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c113fb3f97f58dfab283f9") }
}
mango_practice> db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c113ff3f97f58dfab283fa") }
}
mango_practice> db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c114043f97f58dfab283fb") }
}
mango_practice> db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c1140c3f97f58dfab283fc") }
}
mango_practice> db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c114113f97f58dfab283fd") }
}
mango_practice> db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("5ca0b7e96435f98b5901f463")})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c114183f97f58dfab283fe") }
}
mango_practice> db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("5ca0b9706435f98b5901f46a")})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c1141e3f97f58dfab283ff") }
}
mango_practice> db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("5ca0b8766435f98b5901f467")})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c114243f97f58dfab28400") }
}
mango_practice> db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("5ca0b8546435f98b5901f466")})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c1142a3f97f58dfab28401") }
}
mango_practice> db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("5ca0b9256435f98b5901f469")})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("64c114303f97f58dfab28402") }
}
mango_practice> db.users.find().pretty()
[
  {
    _id: 1,
    username: 'GoodGuyGreg',
    first_name: 'Good Guy',
    last_name: 'Greg'
  },
  {
    _id: 2,
    username: 'ScumbagSteve',
    fullname: { first: 'Scumbag', last: 'Steve' }
  }
]
mango_practice> db.posts.find().pretty()
[
  {
    _id: ObjectId("64c1136e3f97f58dfab283f5"),
    username: 'GoodGuyGreg',
    title: 'Passes out at Party',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("64c113743f97f58dfab283f6"),
    username: 'GoodGuyGreg',
    title: 'Steals your identity',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("64c113793f97f58dfab283f7"),
    username: 'GoodGuyGreg',
    title: 'Reports a bug in your code',
    body: 'Sends you a pull request'
  },
  {
    _id: ObjectId("64c113f43f97f58dfab283f8"),
    username: 'GoodGuyGreg',
    title: 'Passes out at Party',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("64c113fb3f97f58dfab283f9"),
    username: 'GoodGuyGreg',
    title: 'Steals your identity',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("64c113ff3f97f58dfab283fa"),
    username: 'GoodGuyGreg',
    title: 'Reports a bug in your code',
    body: 'Sends you a pull request'
  },
  {
    _id: ObjectId("64c114043f97f58dfab283fb"),
    username: 'ScumbagSteve',
    title: 'Borrows something',
    body: 'Sells it'
  },
  {
    _id: ObjectId("64c1140c3f97f58dfab283fc"),
    username: 'ScumbagSteve',
    title: 'Borrows everything',
    body: 'The end'
  },
  {
    _id: ObjectId("64c114113f97f58dfab283fd"),
    username: 'ScumbagSteve',
    title: 'Forks your repo on github',
    body: 'Sets to private'
  }
]
mango_practice> db.posts.find({username:"GoodGuyGreg"})
[
  {
    _id: ObjectId("64c1136e3f97f58dfab283f5"),
    username: 'GoodGuyGreg',
    title: 'Passes out at Party',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("64c113743f97f58dfab283f6"),
    username: 'GoodGuyGreg',
    title: 'Steals your identity',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("64c113793f97f58dfab283f7"),
    username: 'GoodGuyGreg',
    title: 'Reports a bug in your code',
    body: 'Sends you a pull request'
  },
  {
    _id: ObjectId("64c113f43f97f58dfab283f8"),
    username: 'GoodGuyGreg',
    title: 'Passes out at Party',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("64c113fb3f97f58dfab283f9"),
    username: 'GoodGuyGreg',
    title: 'Steals your identity',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("64c113ff3f97f58dfab283fa"),
    username: 'GoodGuyGreg',
    title: 'Reports a bug in your code',
    body: 'Sends you a pull request'
  }
]
mango_practice> db.posts.find({username:"ScumbagSteve"})
[
  {
    _id: ObjectId("64c114043f97f58dfab283fb"),
    username: 'ScumbagSteve',
    title: 'Borrows something',
    body: 'Sells it'
  },
  {
    _id: ObjectId("64c1140c3f97f58dfab283fc"),
    username: 'ScumbagSteve',
    title: 'Borrows everything',
    body: 'The end'
  },
  {
    _id: ObjectId("64c114113f97f58dfab283fd"),
    username: 'ScumbagSteve',
    title: 'Forks your repo on github',
    body: 'Sets to private'
  }
]
mango_practice> db.comments.find({username:"GoodGuyGreg"})
[
  {
    _id: ObjectId("64c114183f97f58dfab283fe"),
    username: 'GoodGuyGreg',
    comment: 'Hope you got a good deal!',
    post: ObjectId("5ca0b7e96435f98b5901f463")
  },
  {
    _id: ObjectId("64c1141e3f97f58dfab283ff"),
    username: 'GoodGuyGreg',
    comment: "What's mine is yours!",
    post: ObjectId("5ca0b9706435f98b5901f46a")
  },
  {
    _id: ObjectId("64c114243f97f58dfab28400"),
    username: 'GoodGuyGreg',
    comment: "Don't violate the licensing agreement!",
    post: ObjectId("5ca0b8766435f98b5901f467")
  }
]
mango_practice> db.comments.find({username:"ScumbagSteve"})
[
  {
    _id: ObjectId("64c1142a3f97f58dfab28401"),
    username: 'ScumbagSteve',
    comment: "It still isn't clean",
    post: ObjectId("5ca0b8546435f98b5901f466")
  },
  {
    _id: ObjectId("64c114303f97f58dfab28402"),
    username: 'ScumbagSteve',
    comment: 'Denied your PR cause I found a hack',
    post: ObjectId("5ca0b9256435f98b5901f469")
  }
]
mango_practice> mongoimport --db <database_name> --collection <collection_name> --file
Uncaught:
SyntaxError: Missing semicolon. (1:14)

> 1 | mongoimport --db <database_name> --collection <collection_name> --file
    |               ^
  2 |

mango_practice> mongoimport --db <database_name> --collection <collection_name> --file;
Uncaught:
SyntaxError: Missing semicolon. (1:14)

> 1 | mongoimport --db <database_name> --collection <collection_name> --file;
    |               ^
  2 |

mango_practice> mongoimport --db <adarsh> --collection <demo> --;
Uncaught:
SyntaxError: Missing semicolon. (1:14)

> 1 | mongoimport --db <adarsh> --collection <demo> --;
    |               ^
  2 |

mango_practice> db.docs.find({city:{$exists:true}}, {_id:0, city:1, pop:1},{ pop:{$gt:10000}})
[
  { city: 'PROVIDENCE', pop: 31069 },
  { city: 'BOSTON', pop: 3697 },
  { city: 'NEW YORK', pop: 18913 },
  { city: 'CHESTERFIELD', pop: 177 },
  { city: 'ORLANDO', pop: 9275 },
  { city: 'BANGOR', pop: 2867 },
  { city: 'CAPE CANAVERAL', pop: 7655 },
  { city: 'MIAMI', pop: 47761 },
  { city: 'CRANSTON', pop: 25668 },
  { city: 'NORTH LAWRENCE', pop: 943 },
  { city: 'AGAWAM', pop: 15338 },
  { city: 'WILMINGTON', pop: 958 }
]
mango_practice> db.docs.aggregate([{$match:{city:{$exists: true}}},{$group:{_id:"$state", "Total Pop": {$sum:"$pop"}}}])
[
  { _id: 'FL', 'Total Pop': 64691 },
  { _id: 'RI', 'Total Pop': 56737 },
  { _id: 'MA', 'Total Pop': 19212 },
  { _id: 'NY', 'Total Pop': 23681 }
]
mango_practice> db.docs.aggregate([{$match:{state:"NY"}},{$group:{_id:"$state", "Total Pop": {$sum:"$pop"}}}])
[ { _id: 'NY', 'Total Pop': 23681 } ]
mango_practice> db.docs.find({city:{$exists:true}, pop:{$gt:20000}}, {city:1, "capital.name":1})
[
  { _id: '02906', city: 'PROVIDENCE', capital: { name: 'Providence' } },
  { _id: '33125', city: 'MIAMI', capital: { name: 'Tallahassee' } },
  { _id: '02907', city: 'CRANSTON', capital: { name: 'Providence' } }
]
mango_practice>
